package com.universitinder.app.faq

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.universitinder.app.controllers.FaqController
import com.universitinder.app.models.FAQ
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class FAQViewModel(
    private val schoolId: String,
    private val faqController: FaqController,
    val popActivity: () -> Unit
): ViewModel() {
    private val _uiState = MutableStateFlow(FAQUiState())
    val uiState : StateFlow<FAQUiState> = _uiState.asStateFlow()

    fun onUserMessageChange(newVal: String) { _uiState.value = _uiState.value.copy(userMessage = newVal) }

    fun refresh(message: String) {
        viewModelScope.launch(Dispatchers.IO) {
            withContext(Dispatchers.Main) { _uiState.value = _uiState.value.copy(fetchingLoading = true) }
            val faqs = faqController.getFAQs(schoolId)
            withContext(Dispatchers.Main) {
                _uiState.value = _uiState.value.copy(
                    fetchingLoading = false,
                    faqs = faqs,
                    faqObjects = faqs.map { doc -> doc.toObject(FAQ::class.java)!! }.toList(),
                    messages = _uiState.value.messages.plus(Message(from = MessagesFrom.SYSTEM, message = message))
                )
            }
        }
    }

    fun onFaqClick(faq: FAQ) {
        _uiState.value = _uiState.value.copy(
            messages = _uiState.value.messages.plus(Message(from = MessagesFrom.USER, message = faq.question))
        )
        _uiState.value = _uiState.value.copy(
            messages = _uiState.value.messages.plus(Message(from = MessagesFrom.SYSTEM, message = faq.answer))
        )
    }

    fun sendMessage(autoGenerated: String) {
        if (_uiState.value.userMessage.isEmpty() || _uiState.value.userMessage.isBlank()) return
        if (_uiState.value.faqObjects.any { faq -> faq.question.contains(_uiState.value.userMessage) }) {
            _uiState.value = _uiState.value.copy(
                messages = _uiState.value.messages.plus(Message(from = MessagesFrom.USER, message = _uiState.value.userMessage)),
                userMessage = "",
            )
            val faq = _uiState.value.faqObjects.first { faq -> faq.question.contains(_uiState.value.userMessage) }
            _uiState.value = _uiState.value.copy(
                messages = _uiState.value.messages.plus(Message(from = MessagesFrom.SYSTEM, message = faq.answer)),
            )
        } else {
            _uiState.value = _uiState.value.copy(
                messages = _uiState.value.messages.plus(Message(from = MessagesFrom.USER, message = _uiState.value.userMessage)),
                userMessage = "",
            )
            _uiState.value = _uiState.value.copy(
                messages = _uiState.value.messages.plus(Message(from = MessagesFrom.SYSTEM, message = autoGenerated)),
            )
        }
    }
}